# --------------------------------------------------------------------------------------------------
# Syntax:
# --------------------------------------------------------------------------------------------------

# Pattern _____________________ Example matches ________________________________

# Literal File Names:
# /access.log			access.log
# access.log			access.log, logs/access.log, var/logs/access.log
# build/				build

# Wildcard Symbols: 
# * - matches zero or more characters.
# *.log				error.log, logs/debug.log, build/logs/error.log

# ** - match any file or zero or more directories. When followed by a slash (/), it matches only directories.
# logs/**				Matches anything inside the logs directory.
# **/build			var/build, pub/build, build
# foo/**/bar			foo/bar, foo/a/bar, foo/a/b/c/bar

# ? - matches any single character.
# access?.log			access0.log, access1.log, accessA.log
# foo??				fooab, foo23, foo0s

# [] - match any of the characters enclosed in the square brackets. When two characters are separated by a hyphen - it denotes a range of characters. The range includes all characters that are between those two characters. The ranges can be alphabetic or numeric.
# If the first character following the [ is an exclamation mark (!), then the pattern matches any character except those from the specified set.
# *.[oa]			file.o, file.a
# *.[!oa]			file.s, file.1, file.0
# access.[0-2].log		access.0.log, access.1.log, access.2.log
# file.[a-c].out			file.a.out, file.b.out, file.c.out
# file.[a-cx-z].out		file.a.out, file.b.out, file.c.out, file.x.out, file.y.out, file.z.out
# access.[!0-2].log		access.3.log, access.4.log, access.Q.log

# Negating Patterns
# ! negates (re-include) any file that is ignored by the previous pattern. The exception to this rule is to re-include a file if its parent directory is excluded.
# *.log, !error.log		error.log or logs/error.log will not be ignored

# --------------------------------------------------------------------------------------------------

# Package (ignore)
desktop.ini
*.exr
*.tx
*.swatch
*.bak
*.rar
.vscode
.test
**/grepWin_backup

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# celery beat schedule file
celerybeat-schedule

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/
update_package.cmd
uitk/slots/maya/shader_utils_maya/resources/hdr/industrial_pipe_and_valve_01_4k.exr
uitk/slots/maya/shader_utils_maya/resources/hdr/aircraft_workshop_01_4k.exr

